1. this — это специальный указатель или ссылка в объектно-ориентированном программировании, который ссылается на текущий объект, в контексте которого выполняется метод или конструктор.

Основные моменты:
Используется для доступа к полям и методам текущего объекта.

Помогает различать локальные переменные и поля класса с одинаковыми именами.

В некоторых языках (например, C++, Java, C#) this является неявным параметром методов экземпляра.

Позволяет передавать текущий объект в другие методы или возвращать его из метода.
2. Абстрактный класс — это класс, который нельзя создать напрямую, он служит шаблоном для других классов и может содержать абстрактные методы без реализации.
3. Вычислительная сложность алгоритма — это функция, показывающая, как меняется количество операций (времени) или используемой памяти в зависимости от размера входных данных. Основная оценка — асимптотическая, выражается в нотации Большого O (O):

O(1) — постоянное время, не зависит от размера данных

O(log N) — логарифмическое время, например, двоичный поиск

O(N) — линейное время, например, простой проход по массиву

O(N²) — квадратичное время, например, сортировка пузырьком

Измерение времени работы программы обычно проводится с помощью профилирования или таймеров для оценки реального времени выполнения
4.Деревья — это иерархическая структура данных, где каждый узел может иметь потомков, а верхний узел называется корнем.

Бинарное дерево — дерево, в котором у каждого узла не более двух потомков (левого и правого).

Бинарное дерево поиска (BST) — бинарное дерево, где для каждого узла все значения в левом поддереве меньше, а в правом — больше значения узла. Это обеспечивает быстрый поиск, вставку и удаление элементов за время примерно O(log N) при сбалансированном дереве
5.Иерархия классов — это структура в виде дерева, где классы связаны отношением наследования: базовый (родительский) класс передаёт свои свойства и методы дочерним (наследникам).

Наследование — механизм ООП, позволяющий создавать новый класс на основе существующего, повторно используя и расширяя его функциональность. Это упрощает код и поддерживает повторное использование

6. Иерархия классов исключений — структура классов, где базовый класс Exception имеет подклассы для разных типов ошибок.

try-catch-finally — блоки для обработки ошибок:

try — код, где может произойти ошибка,

catch — обработка ошибки,

finally — код, который выполняется всегда, независимо от ошибок.

7.Интерфейс — это набор абстрактных методов без реализации, задающий контракт для классов.

Реализация интерфейса — класс, который обязуется реализовать все методы интерфейса.

8. Классы — это шаблоны для создания объектов, объединяющие данные и методы.

Инкапсуляция — скрытие внутренностей объекта и предоставление доступа к данным только через методы.

Модификаторы доступа (например, public, private, protected) управляют уровнем доступа к полям и методам класса, обеспечивая защиту данных и контроль их использования.

9.Конструктор класса — это специальный метод с именем класса, который вызывается при создании объекта для инициализации его полей. Он не имеет возвращаемого типа и может быть без параметров (конструктор по умолчанию) или с параметрами для задания начальных значений.

10.Массивы — упорядоченный набор однотипных элементов с доступом по индексу.

Отсортированные массивы позволяют быстро искать элементы (например, бинарным поиском за O(log N)), но вставка и удаление сложнее.

Неотсортированные массивы проще для вставки и удаления, но поиск занимает O(N) времени.

11. Полиморфизм — способность использовать один и тот же метод для разных типов объектов с разной реализацией.

Перегрузка методов — создание в одном классе нескольких методов с одинаковым именем, но разными параметрами для разных вариантов вызова.

12.Двоичное дерево поиска (BST) — это двоичное дерево, где у каждого узла не более двух потомков, и значения в левом поддереве меньше значения узла, а в правом — больше или равны.

Реализация узла BST на C++:

cpp
struct NodeTree {
    int data;
    NodeTree* left;
    NodeTree* right;
};
Здесь data — значение узла, left и right — указатели на левого и правого потомка соответственно.

Основные операции BST — поиск, вставка и удаление, работают эффективно благодаря упорядоченности дерева.

13.Двусвязный список — структура данных, где каждый элемент содержит данные и два указателя: на следующий и предыдущий элемент.

Пример реализации узла на C++:

cpp
struct Item {
    Data data;
    Item* next;
    Item* prev;
};
Это позволяет эффективно перемещаться и изменять список в обе стороны.

14.Односвязный список — структура данных, где каждый элемент содержит данные и указатель на следующий элемент.

Пример реализации узла на C++:

cpp
struct Item {
    Data data;
    Item* next;
};
Обеспечивает простое последовательное хранение и обход элементов в одном направлении

15. Swing — это библиотека Java для создания графического интерфейса (GUI), полностью написанная на Java и предоставляющая множество готовых компонентов (кнопки, списки, окна и др.). Она основана на AWT, но более гибкая и кроссплатформенная, поддерживает стили и расширения.

Графика в Java реализуется через классы и методы для рисования (например, paint(Graphics g)), позволяя создавать и отображать визуальные элементы и анимацию в окнах приложений.

16. Работа с файлами в Java включает создание, чтение, запись и удаление файлов. Для этого используются классы из пакетов java.io (например, File, FileReader, BufferedReader, FileWriter, BufferedWriter) и java.nio.file.Files.

Создание файла: через File и метод createNewFile().

Чтение: с помощью FileReader и BufferedReader.

Запись: через FileWriter и BufferedWriter.

Удаление: метод delete() класса File.

Работа с файлами обычно выполняется в блоках try-catch для обработки исключений и требует закрытия потоков после использования.

17. Связанные списки — структура данных, состоящая из узлов, где каждый узел содержит данные и ссылку на следующий (односвязный) или на следующий и предыдущий узлы (двусвязный), обеспечивая динамическое хранение и удобное добавление/удаление элементов.

18. Сортировка массива — упорядочивание элементов по возрастанию или убыванию.

Примеры алгоритмов сортировки:

Пузырьковая (Bubble Sort): сравнивает и меняет соседние элементы; простая, но медленная (O(n²)).

Сортировка выбором (Selection Sort): выбирает минимальный элемент и ставит его в начало; тоже O(n²).

Сортировка вставками (Insertion Sort): вставляет каждый элемент на нужное место среди уже отсортированных; в лучшем случае O(n), в худшем O(n²).

Сортировка слиянием (Merge Sort): делит массив на части, сортирует и объединяет; эффективная, O(n log n).

Быстрая сортировка (Quick Sort): выбирает опорный элемент, делит массив и рекурсивно сортирует; средняя сложность O(n log n).

Выбор алгоритма зависит от размера и характера данных.

19. Статические элементы класса — это поля и методы, принадлежащие самому классу, а не конкретному объекту, и общие для всех его экземпляров.


20. Хэш — структура данных (хэш-таблица), хранящая пары ключ-значение, где ключ преобразуется в индекс массива с помощью хеш-функции. Обеспечивает быстрый доступ, вставку и удаление за время около O(1). При коллизиях (одинаковом индексе для разных ключей) применяются методы разрешения, например, цепочки или открытая адресация.